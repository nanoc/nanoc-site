---
title: "What’s new?"
---

#p This page summarizes new features in minor releases. For a detailed list of all changes in all versions, see %ref[item=/release-notes.*]{}.

#section %h{Nanoc 4.10}
  #p Nanoc 4.10 comes with an upgraded Sass filter. It comes with a new %code{nanoc()} Sass function, which allows pulling in Nanoc site data into stylesheets:

  #listing[lang=sass]
    .title {
      content: nanoc('@config[:title]');
    %}

  #p The Sass filter also comes with a matching %code{:sass_sourcemap} filter, which generates Sass source maps. See %ref[item=/doc/guides/using-common-filters.*,frag=using-sass-source-maps]{} for details.

#section %h{Nanoc 4.9}
  #p The list of enabled checks can now be specified in the configuration file, rather than the %filename{Checks} file. For example:

  #listing[lang=ruby,legacy-49,x]
    # in the Checks file
    deploy_check :internal_links
    deploy_check :stale

  #listing[lang=yaml,new-49]
    # in nanoc.yaml
    checking:
      enabled_checks:
        - internal_links
        - stale

  #p Additionally, custom check can now be defined using %code{Nanoc::Check.define}, somewhere in the %filename{lib/} directory:

  #listing[lang=ruby,legacy-49]
    # in the Checks file
    check :no_unprocessed_erb do
      @output_filenames.each do |filename|
        if filename =~ /html$/ && File.read(filename).match(/<%%/)
          add_issue("unprocessed erb detected", subject: filename)
        end
      end
    end

  #listing[lang=ruby,new-49]
    # somewhere in lib/
    Nanoc::Check.define(:no_unprocessed_erb) do
      @output_filenames.each do |filename|
        if filename =~ /html$/ && File.read(filename).match(/<%%/)
          add_issue("unprocessed erb detected", subject: filename)
        end
      end
    end

  #p Lastly, invoking the %command{check} command with no options will now run all enabled checks (either enabled using %code{deploy_check} in the %filename{Checks} file, or listed under %code{enabled_checks} in the configuration file).

  #p Use of the %filename{Checks} file is discouraged from now on, though the functionality will not be removed before Nanoc 5.0 (and there are no plans to start working on Nanoc 5.0 at this point in time).

  #p Identifiers now also have a %code{#match?} method, which returns %code{true} if the identifier matches the given pattern, %code{false} otherwise.

#section %h{Nanoc 4.8}
  #p Nanoc 4.8 adds an %code{asciidoctor} filter, for invoking %ref[url=http://asciidoctor.org]{Asciidoctor}, a Ruby implementation of %ref[url=http://www.methods.co.nz/asciidoc/]{AsciiDoc}:

  #listing[lang=ruby]
    compile '/**/*.adoc' do
      filter :asciidoctor
      layout '/page.*'
      write ext: 'html'
    end

  #p Previously, the %code{asciidoctor} was available through the %code{nanoc-asciidoctor} gem, which is now obsolete.

#section %h{Nanoc 4.7}
  #p Nanoc 4.7 adds a shortcut for writing an item with a specific extension, while retaining the base name:

  #listing[lang=ruby]
    compile '/**/*.md' do
      filter :kramdown
      write ext: 'html'
    end

  #p Previously, you’d have to use the rather verbose %code{write item.identifier.without_exts + '.html'}.

  #p Nanoc 4.7 also adds the %code{:erubi} filter, which calls %ref[url=https://github.com/jeremyevans/erubi]{Erubi}, an ERB template engine for Ruby.

#section %h{Nanoc 4.6}
  #p Nanoc 4.6 adds %code{#snapshot?} to item representations. It returns true if the given representations has a snapshot with the given name, false otherwise. For example:

  #listing[lang=rhtml]
    <%% if @rep.snapshot?(:latex) %%>
      <link rel=stylesheet href=latex.css>
    <%% end %%>

  #p The %code{#content_for} function, part of the capturing helper (see %ref[item=/doc/reference/helpers.*,frag=capturing]{} for details), can now be used to set captured content directly:

  #listing[lang=ruby]
    content_for(:head, 'stuff')

  #p Previously, setting captured content manually was only possible by appending to %code{_erbout}:

  #listing[lang=ruby]
    content_for(:head) { _erbout << 'stuff' %}

  #p When passing a string to the %code{#content_for} function, parameters are passed before the string argument:

  #listing[lang=ruby]
    content_for(:head, existing: :append, 'stuff')

  #p Lastly, items and layouts now have %code{#raw_content=} during preprocessing, to allow changing the raw content of items and layouts.

#section %h{Nanoc 4.5}
  #p Nanoc 4.5 bundles the Git deployer, which used to be in the %ref[url=https://github.com/nanoc/nanoc-git]{%code{nanoc-git} repository}. The %code{nanoc-git} gem can be removed from the %filename{Gemfile}. For details, see %ref[item=/doc/deploying.*,frag=with-git]{}.

#section %h{Nanoc 4.4}
  #p Nanoc 4.4 adds support for environments. The %command{compile} command now takes an %command{--env} option, e.g. %command{nanoc compile --env=prod}, which sets the %code{NANOC_ENV} environment variable to the given value, and also changes the way the configuration is read.

  #p The configuration can now contain an %code{environments} section, like this:

  #listing[lang=yaml]
    base_url: http://nanoc.dev

    environments:
      prod:
        base_url: http://nanoc.ws
      staging:
        base_url: http://staging.nanoc.ws

  #p When an environment is specified on the command line, the data for the environment with the given name will be merged into the top level of the configuration. For example, with %command{--env=prod}, the configuration effectively becomes as follows:

  #listing[lang=yaml]
    base_url: http://nanoc.ws

  #p For details about environments, see %ref[item=/doc/sites.*,frag=environments]{}.

#section %h{Nanoc 4.3}
  #p Nanoc 4.3 adds %code{Nanoc::Filter.define}, which makes defining filters a little less verbose:

  #listing[lang=ruby]
    Nanoc::Filter.define(:censor) do |content, params|
      content.gsub('Nanoc sucks', 'Nanoc rocks')
    end

  #p See %ref[item=/doc/filters.*,frag=writing-filters]{} for details.

  #p Additionally, Nanoc will automatically %code{require} all gems defined in the %code{nanoc} group in the %filename{Gemfile}. This is particularly useful for the %code{guard-nanoc} gem, which, when added to the %code{nanoc} group in the %filename{Gemfile}, will add a new %command{live} command to %command{nanoc}. This %command{nanoc live} command simultaneously recompiles the site on changes, and runs a web server. See the %ref[url=https://github.com/guard/guard-nanoc]{%code{guard-nanoc} repository} for details.

#section %h{Nanoc 4.2 and older}
  #p Release notes are pending. For the time being, see %ref[item=/release-notes.*]{}.
