---
title: "Using common filters"
---

#p This guide gives an overview of typical approaches for using common filters.

#section %h{Using Sass}
  #p %ref[url=http://sass-lang.com/]{Sass} is a CSS extension language that supports variables, mixins, partials, and more. To use Sass with Nanoc, create a rule that matches %glob{/**/*.sass}, calls the %code{:sass} filter, and writes out a %filename{.css} file:

  #listing[lang=ruby]
    compile '/**/*.sass' do
      filter :sass
      write item.identifier.without_ext + '.css'
    end

  #p If you prefer using the SCSS syntax for Sass, rather than the default Sass syntax, pass %code{syntax: :scss} to the %code{:sass} filter, and match on %glob{/**/*.scss} rather than %glob{/**/*.sass}:

  #listing[lang=ruby]
    compile '/**/*.scss' do
      filter :sass, syntax: :scss
      write item.identifier.without_ext + '.css'
    end

  #p For more information, see the %ref[item=/doc/reference/filters.*,frag=sass]{%code{:sass} filter reference}.

  #section %h{Support Sass and SCSS}
    #p Sass has two syntaxes: Sass and SCSS. To support both, you can use curly braces in a compilation rule’s pattern to match both extensions:

    #listing[lang=ruby]
      compile '/css/*.{sass,scss%}' do
        syntax = @item.identifier.ext.to_sym
        filter :sass, syntax: syntax, style: :compact
      end

    #p The %code{:sass} filter is passed the %code{:syntax} option, which in the example above is derived from the item’s identifier.

  #section %h{Using partials}
    #p Partials are Sass files that don’t have an output file, but only serve to be included in another Sass file. By convention, filenames of partials start with an underscore (e.g. %filename{css/_layout.scss}), which makes it possible for them to be handled specially within Nanoc:

    #listing[lang=ruby]
      ignore '/css/_*.sass'

      compile '/css/*.sass' do
        filter :sass, syntax: :sass, style: :compact
      end

    #p With the rules defined above, you will be able to import Sass partials:

    #listing[lang=sass]
      @import "/css/**/_layout.*"

  #section[id=using-sass-source-maps] %h{Using Sass source maps}
    #p Nanoc’s Sass filter supports %ref[url=http://thesassway.com/intermediate/using-source-maps-with-sass]{source maps}, which makes debugging Sass easier. To generate a source map for Sass, use the %code{:sass_sourcemap} filter:

    #listing[lang=ruby]
      [:default, :sourcemap].each do |rep_name|
        compile '/css/**/*.sass', rep: rep_name do
          path = @item.identifier.without_ext + '.css'
          options = { syntax: :sass, style: :compact, sourcemap_path: path + '.map' %}

          case rep_name
          when :default
            filter :sass, options
            write path
          when :sourcemap
            filter :sass_sourcemap, options
            write path + '.map'
          end
        end
      end

    #p When using the %code{:sass_sourcemap} filter, be sure to invoke it with the same options as the %code{:sass} filter.

  #section %h{Using %code{nanoc()} in Sass}
    #p Nanoc’s Sass filter defines a %code{nanoc()} Sass function, which allows you to evaluate Ruby code from Sass within the compilation context. It takes a string containing Ruby code.

    #p For example, assume a configuration file with the following contents:

    #listing[lang=yaml]
      title: Hello world!

    #p The Sass file can now reference the title defined in the configuration:

    #listing[lang=sass]
      .title {
        content: nanoc('@config[:title]');
      %}

    #p The resulting CSS will look like this:

    #listing[lang=css]
      .title {
        content: "Hello world!";
      %}

#section %h{Using kramdown}
  #p %ref[url=http://kramdown.gettalong.org/]{kramdown} is a fast and featureful Markdown processor. To use it with Nanoc, create a rule that matches %glob{/**/*.md} and calls the %code{:kramdown} filter:

  #listing[lang=ruby]
    compile '/**/*.md' do
      filter :kramdown
      layout '/default.*'
      write item.identifier.without_ext + '.html'
    end

  #p The %code{:kramdown} filter can take options. For example, pass %code{auto_ids: false} to disable automatic header ID generation:

  #listing[lang=ruby]
    compile '/**/*.md' do
      filter :kramdown, auto_ids: false
      layout '/default.*'
      write item.identifier.without_ext + '.html'
    end

  #p For more information, see the %ref[item=/doc/reference/filters.*,frag=kramdown]{%code{:kramdown} filter reference}.
